use std::collections::BTreeMap;

// TODO: these can all be generated by a build script
#[derive(Ord, PartialOrd, Eq, PartialEq, Debug)]
enum CityName {
    SanFrancisco,
    Chicago,
    Montreal,
    NewYork,
    LosAngeles,
    Atlanta,
    Washington,
    MexicoCity,
    Miami,
}

fn list_cities() -> Vec<CityName> {
    vec![
        CityName::SanFrancisco,
        CityName::Chicago,
        CityName::Montreal,
        CityName::NewYork,
        CityName::LosAngeles,
        CityName::Atlanta,
        CityName::Washington,
        CityName::MexicoCity,
        CityName::Miami,
    ]
}

fn neighbors(city: &CityName) -> Vec<CityName> {
    match city {
        &CityName::SanFrancisco => vec![CityName::Chicago, CityName::LosAngeles],
        &CityName::Chicago => vec![
            CityName::SanFrancisco,
            CityName::LosAngeles,
            CityName::MexicoCity,
            CityName::Atlanta,
            CityName::Montreal,
        ],
        &CityName::Montreal => vec![CityName::Chicago, CityName::Washington, CityName::NewYork],
        &CityName::NewYork => vec![CityName::Montreal, CityName::Washington],
        &CityName::LosAngeles => vec![
            CityName::SanFrancisco,
            CityName::MexicoCity,
            CityName::Chicago,
        ],
        &CityName::Atlanta => vec![CityName::Chicago, CityName::Washington, CityName::Miami],
        &CityName::Washington => vec![
            CityName::Atlanta,
            CityName::Montreal,
            CityName::NewYork,
            CityName::Miami,
        ],
        &CityName::MexicoCity => vec![CityName::LosAngeles, CityName::Chicago, CityName::Miami],
        &CityName::Miami => vec![
            CityName::MexicoCity,
            CityName::Atlanta,
            CityName::Washington,
        ],
    }
}

#[derive(Debug)]
enum DiseaseType {
    Blue,
    Yellow,
}

#[derive(Debug)]
struct Disease {
    count: u8,
    outbreak_handled: bool,
}

impl Disease {
    fn new() -> Disease {
        Disease {
            count: 0,
            outbreak_handled: false,
        }
    }

    fn infect(&mut self) -> InfectionResult {
        if self.outbreak_handled {
            return InfectionResult::None;
        }
        if self.count >= 3 {
            self.outbreak_handled = true;
            return InfectionResult::Outbreak;
        }
        self.count += 1;
        InfectionResult::None
    }

    fn reset_outbreak_bit(&mut self) {
        self.outbreak_handled = false;
    }
}

#[derive(Debug)]
enum InfectionResult {
    None,
    Outbreak,
}

#[derive(Debug)]
struct City {
    blue: Disease,
    yellow: Disease,
}

impl City {
    fn new() -> City {
        City {
            blue: Disease::new(),
            yellow: Disease::new(),
        }
    }

    fn infect(&mut self, disease: &DiseaseType) -> InfectionResult {
        match disease {
            &DiseaseType::Blue => self.blue.infect(),
            &DiseaseType::Yellow => self.yellow.infect(),
        }
    }

    fn reset_outbreak_bits(&mut self) {
        self.blue.reset_outbreak_bit();
        self.yellow.reset_outbreak_bit();
    }
}

#[derive(Debug)]
struct Map {
    cities: BTreeMap<CityName, City>,
    outbreaks: u8,
}

impl Map {
    fn new() -> Map {
        let mut cities: BTreeMap<CityName, City> = BTreeMap::new();
        for city_name in list_cities() {
            cities.insert(city_name, City::new());
        }
        Map {
            cities,
            outbreaks: 0,
        }
    }

    fn infect(&mut self, city: CityName, disease: &DiseaseType) {
        let mut cities_to_infect = vec![city];
        while let Some(city) = cities_to_infect.pop() {
            let mut had_outbreak = false;
            match self.cities.get_mut(&city) {
                None => panic!("didn't add all cities to map?"),
                Some(entry) => match entry.infect(disease) {
                    InfectionResult::None => {}
                    InfectionResult::Outbreak => {
                        had_outbreak = true;
                        cities_to_infect.append(&mut neighbors(&city));
                    }
                },
            };
            if had_outbreak {
                self.outbreaks += 1;
            }
        }
        for city in self.cities.values_mut() {
            city.reset_outbreak_bits();
        }
    }
}

fn main() {
    let mut map = Map::new();
    println!("{:?}", map);
    map.infect(CityName::Atlanta, &DiseaseType::Blue);
    println!("{:?}", map);
    map.infect(CityName::Miami, &DiseaseType::Blue);
    println!("{:?}", map);
    map.infect(CityName::Atlanta, &DiseaseType::Blue);
    println!("{:?}", map);
    map.infect(CityName::Atlanta, &DiseaseType::Blue);
    println!("{:?}", map);
    map.infect(CityName::Atlanta, &DiseaseType::Blue);
    println!("{:?}", map);
    map.infect(CityName::Miami, &DiseaseType::Blue);
    println!("{:?}", map);
    map.infect(CityName::Miami, &DiseaseType::Blue);
    println!("{:?}", map);
}
